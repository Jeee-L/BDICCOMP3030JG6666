{"remainingRequest":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\src\\employee\\Page-Employee-Claim.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\src\\employee\\Page-Employee-Claim.vue","mtime":1556169316000},{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport PageOptions from \"../config/PageOptions.vue\";\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport { ClientTable } from \"vue-tables-2\";\r\nimport { all } from \"q\";\r\nimport { setTimeout } from \"timers\";\r\n\r\nVue.use(ClientTable);\r\n\r\nvar rawData = [];\r\n\r\nexport default {\r\n  components: {\r\n    ClientTable\r\n  },\r\n  data() {\r\n    return {\r\n      employee_id: \"\",\r\n      tableData: [],\r\n      columns: [\r\n        \"Index\",\r\n        \"Claim_ID\",\r\n        \"Insurance_ID\",\r\n        \"Username\",\r\n        \"Reason\",\r\n        \"Lost Time\",\r\n        \"Lost Place\",\r\n        \"Claim Date\",\r\n        \"Remark\",\r\n        \"Process\"\r\n      ],\r\n      options: {\r\n        pagination: { chunk: 5 },\r\n        sortIcon: {\r\n          is: \"fa-sort\",\r\n          base: \"fas\",\r\n          up: \"fa-sort-up\",\r\n          down: \"fa-sort-down\"\r\n        }\r\n      },\r\n      // remark and reason for lost\r\n      modalShow: false,\r\n      modalTitle: \"\",\r\n      modalContent: \"\"\r\n    };\r\n  },\r\n  created() {\r\n    PageOptions.pageWithTopMenu = true;\r\n    PageOptions.pageWithoutSidebar = true;\r\n\r\n    this.updateData();\r\n    this.retryData();\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    PageOptions.pageWithTopMenu = false;\r\n    PageOptions.pageWithoutSidebar = false;\r\n    next();\r\n  },\r\n  methods: {\r\n    showModalData(row, tag) {\r\n      if (tag == \"Reason\") {\r\n        this.modalContent = row.Reason;\r\n        this.modalTitle = \"Reason: \" + row.Claim_ID;\r\n      } else if (tag == \"Remark\") {\r\n        this.modalContent = row.Remark;\r\n        this.modalTitle = \"Remark: \" + row.Claim_ID;\r\n      }\r\n      this.modalShow = true;\r\n    },\r\n    processDecision(data, tag) {\r\n      alert(\"process works\");\r\n      var decision = {\r\n        claim_id: data.Claim_ID,\r\n        employee_id: this.$employee.username,\r\n        state: tag\r\n      };\r\n      var obj = JSON.stringify(decision);\r\n      axios\r\n        .post(\"/address_claim/\", obj)\r\n        .then(res => {\r\n          var response = JSON.parse(JSON.stringify(res.data));\r\n          alert(response);\r\n        })\r\n        .catch(function(error) {\r\n          console.log(error);\r\n        });\r\n    },\r\n    updateData() {\r\n      rawData = [];\r\n      axios\r\n        .get(\"/list_all_claim/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            for (var i = 0; i < response.length; i++) {\r\n              if (response[i].status == \"-1\") {\r\n                rawData[rawData.length] = {\r\n                  Claim_ID: response[i].id,\r\n                  Insurance_ID: response[i].insurance_id,\r\n                  Username: response[i].username,\r\n                  Reason: response[i].reason,\r\n                  \"Lost Time\": response[i].lost_time,\r\n                  \"Lost Place\": response[i].lost_place,\r\n                  \"Claim Date\": response[i].date,\r\n                  Remark: response[i].remark\r\n                };\r\n              }\r\n            }\r\n          }\r\n          if (rawData != null) {\r\n            this.tableData = rawData.map((item, index) => {\r\n              item[\"Index\"] = index;\r\n              return item;\r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    },\r\n    show(group, type = \"\") {\r\n      const text = \"New claim order awarting for process!\";\r\n      this.$notify({\r\n        group,\r\n        text,\r\n        type,\r\n        data: {\r\n          randomNumber: Math.random()\r\n        }\r\n      });\r\n    },\r\n    retryData() {\r\n      var timer;\r\n      axios\r\n        .get(\"/list_all_claim/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            this.show(\"bottom-right\", \"danger\");\r\n            if (response.length != rawData.length) {\r\n              this.show(\"bottom-right\", \"danger\");\r\n            }\r\n            timer = setInterval(() => {\r\n              clearInterval(timer);\r\n              this.retryData();\r\n            }, 10000);\r\n          } else {\r\n            console.log(\"Periodlically update failed.\");\r\n            return;\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Page-Employee-Claim.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Page-Employee-Claim.vue","sourceRoot":"src/employee","sourcesContent":["<template>\r\n  <div class=\"card card-default\">\r\n    <div class=\"card-header\">\r\n      <h3>Claim Record Table</h3>\r\n    </div>\r\n    <div class=\"card-body\" style=\"font-size: 15px\">\r\n      <div>\r\n        Please click button \"Update Table\" once you want to check new data.\r\n        <br>Once new insurance is created, the system will notfify employees at the top-right corner.\r\n        <br>Requests for data update will be initiated every ten seconds.\r\n      </div>\r\n      <div class=\"btn-update\">\r\n        <b-btn\r\n          variant=\"outline-info\"\r\n          class=\"mb-1 mr-1 right-button\"\r\n          @click=\"updateData()\"\r\n        >Update Table</b-btn>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card card-body table-part\">\r\n      <v-client-table :data=\"tableData\" :columns=\"columns\" :options=\"options\">\r\n        <template slot=\"Remark\" slot-scope=\"props\">\r\n          <div>\r\n            <b-btn\r\n              variant=\"outline-dark\"\r\n              class=\"btn-xs\"\r\n              v-on:click=\"showModalData(props.row, 'Remark')\"\r\n            >Check</b-btn>\r\n          </div>\r\n        </template>\r\n        <template slot=\"Reason\" slot-scope=\"props\">\r\n          <div>\r\n            <b-btn\r\n              variant=\"outline-dark\"\r\n              class=\"btn-xs\"\r\n              v-on:click=\"showModalData(props.row, 'Reason')\"\r\n            >Check</b-btn>\r\n          </div>\r\n        </template>\r\n        <template slot=\"Process\" slot-scope=\"props\">\r\n          <b-btn\r\n            variant=\"outline-success\"\r\n            class=\"btn-xs btn-decision\"\r\n            v-on:click=\"processDecision(props.row, '1')\"\r\n          >Agree</b-btn>\r\n          <b-btn\r\n            variant=\"outline-warning\"\r\n            class=\"btn-xs btn-decision\"\r\n            v-on:click=\"processDecision(props.row, '2')\"\r\n          >More</b-btn>\r\n          <b-btn\r\n            variant=\"outline-danger\"\r\n            class=\"btn-xs btn-decision\"\r\n            v-on:click=\"processDecision(props.row, '0')\"\r\n          >Decline</b-btn>\r\n        </template>\r\n      </v-client-table>\r\n    </div>\r\n\r\n    <b-modal id=\"modals-default\" :title=\"modalTitle\" cancel-only v-model=\"modalShow\">\r\n      <p>{{modalContent}}</p>\r\n    </b-modal>\r\n\r\n    <!-- bottom right animation example -->\r\n    <notifications group=\"bottom-right\" position=\"top right\" :speed=\"500\" :duration=\"2000\"/>\r\n  </div>\r\n</template>\r\n<script>\r\nimport PageOptions from \"../config/PageOptions.vue\";\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport { ClientTable } from \"vue-tables-2\";\r\nimport { all } from \"q\";\r\nimport { setTimeout } from \"timers\";\r\n\r\nVue.use(ClientTable);\r\n\r\nvar rawData = [];\r\n\r\nexport default {\r\n  components: {\r\n    ClientTable\r\n  },\r\n  data() {\r\n    return {\r\n      employee_id: \"\",\r\n      tableData: [],\r\n      columns: [\r\n        \"Index\",\r\n        \"Claim_ID\",\r\n        \"Insurance_ID\",\r\n        \"Username\",\r\n        \"Reason\",\r\n        \"Lost Time\",\r\n        \"Lost Place\",\r\n        \"Claim Date\",\r\n        \"Remark\",\r\n        \"Process\"\r\n      ],\r\n      options: {\r\n        pagination: { chunk: 5 },\r\n        sortIcon: {\r\n          is: \"fa-sort\",\r\n          base: \"fas\",\r\n          up: \"fa-sort-up\",\r\n          down: \"fa-sort-down\"\r\n        }\r\n      },\r\n      // remark and reason for lost\r\n      modalShow: false,\r\n      modalTitle: \"\",\r\n      modalContent: \"\"\r\n    };\r\n  },\r\n  created() {\r\n    PageOptions.pageWithTopMenu = true;\r\n    PageOptions.pageWithoutSidebar = true;\r\n\r\n    this.updateData();\r\n    this.retryData();\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    PageOptions.pageWithTopMenu = false;\r\n    PageOptions.pageWithoutSidebar = false;\r\n    next();\r\n  },\r\n  methods: {\r\n    showModalData(row, tag) {\r\n      if (tag == \"Reason\") {\r\n        this.modalContent = row.Reason;\r\n        this.modalTitle = \"Reason: \" + row.Claim_ID;\r\n      } else if (tag == \"Remark\") {\r\n        this.modalContent = row.Remark;\r\n        this.modalTitle = \"Remark: \" + row.Claim_ID;\r\n      }\r\n      this.modalShow = true;\r\n    },\r\n    processDecision(data, tag) {\r\n      alert(\"process works\");\r\n      var decision = {\r\n        claim_id: data.Claim_ID,\r\n        employee_id: this.$employee.username,\r\n        state: tag\r\n      };\r\n      var obj = JSON.stringify(decision);\r\n      axios\r\n        .post(\"/address_claim/\", obj)\r\n        .then(res => {\r\n          var response = JSON.parse(JSON.stringify(res.data));\r\n          alert(response);\r\n        })\r\n        .catch(function(error) {\r\n          console.log(error);\r\n        });\r\n    },\r\n    updateData() {\r\n      rawData = [];\r\n      axios\r\n        .get(\"/list_all_claim/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            for (var i = 0; i < response.length; i++) {\r\n              if (response[i].status == \"-1\") {\r\n                rawData[rawData.length] = {\r\n                  Claim_ID: response[i].id,\r\n                  Insurance_ID: response[i].insurance_id,\r\n                  Username: response[i].username,\r\n                  Reason: response[i].reason,\r\n                  \"Lost Time\": response[i].lost_time,\r\n                  \"Lost Place\": response[i].lost_place,\r\n                  \"Claim Date\": response[i].date,\r\n                  Remark: response[i].remark\r\n                };\r\n              }\r\n            }\r\n          }\r\n          if (rawData != null) {\r\n            this.tableData = rawData.map((item, index) => {\r\n              item[\"Index\"] = index;\r\n              return item;\r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    },\r\n    show(group, type = \"\") {\r\n      const text = \"New claim order awarting for process!\";\r\n      this.$notify({\r\n        group,\r\n        text,\r\n        type,\r\n        data: {\r\n          randomNumber: Math.random()\r\n        }\r\n      });\r\n    },\r\n    retryData() {\r\n      var timer;\r\n      axios\r\n        .get(\"/list_all_claim/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            this.show(\"bottom-right\", \"danger\");\r\n            if (response.length != rawData.length) {\r\n              this.show(\"bottom-right\", \"danger\");\r\n            }\r\n            timer = setInterval(() => {\r\n              clearInterval(timer);\r\n              this.retryData();\r\n            }, 10000);\r\n          } else {\r\n            console.log(\"Periodlically update failed.\");\r\n            return;\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.table-part {\r\n  background-color: rgba(127, 236, 255, 0.096) !important;\r\n}\r\n\r\n.btn-update {\r\n  margin-top: 20px;\r\n}\r\n\r\n.btn-decision {\r\n  margin-right: 5px;\r\n}\r\n</style>\r\n"]}]}