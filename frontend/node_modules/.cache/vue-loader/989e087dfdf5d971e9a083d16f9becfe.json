{"remainingRequest":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\src\\pages\\User-Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\src\\pages\\User-Register.vue","mtime":1555230546000},{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PageOptions from \"../config/PageOptions.vue\";\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      disabled: false,\n      time: 0,\n      btntxt: \"Send Verification Code\",\n\n      verification_code: \"\",\n      verification_input: \"\",\n      verification_field: false,\n\n      formData: {\n        username: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        email: \"\",\n        phone_num: \"\",\n        verify: 1\n      }\n    };\n  },\n  created() {\n    PageOptions.pageEmpty = true;\n    document.body.className = \"bg-white\";\n  },\n  beforeRouteLeave(to, from, next) {\n    PageOptions.pageEmpty = false;\n    document.body.className = \"\";\n    next();\n  },\n  computed: {\n    isFormInvalid() {\n      return Object.keys(this.fields).some(key => this.fields[key].invalid);\n    }\n  },\n  methods: {\n    submitForm() {\n      if (!this.isFormInvalid && this.verification_field) {\n        alert(\"All fields in form are valid.\");\n        this.formData.verify = 1;\n        var obj = JSON.stringify(this.formData);\n        axios\n          .post(\"/register/\", obj)\n          .then(res => {\n            var response = JSON.parse(JSON.stringify(res.data));\n            if (response.state == \"1\") {\n              alert(\n                \"Welcome to Hibernia-Sino Travel Insurance, dear customer.\"\n              );\n              this.$router.push(\"/login\");\n            } else {\n              this.swalNotification(\"danger\");\n            }\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n      } else if (!this.isFormInvalid && !this.verification_field) {\n        alert(\"Please enter valid verification code.\");\n      } else {\n        alert(\"Please enter valid information in all required fields.\");\n      }\n    },\n    sendCode() {\n      this.formData.verify = 0;\n      this.verification_input = \"\";\n      this.verification_field = false;\n\n      if (this.fields.email.valid) {\n        var params = {\n          email: this.formData.email,\n          verify: this.formData.verify\n        };\n        var obj = JSON.stringify(params);\n\n        axios\n          .post(\"/register/\", obj)\n          .then(res => {\n            if (res.data == 0) {\n              alert(\"Sorry, sending verification code failed.\");\n            } else {\n              this.time = 60;\n              this.disabled = true;\n              this.timer();\n              this.verification_code = res.data;\n              alert(res.data);\n            }\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n      }\n    },\n    timer() {\n      if (this.time > 0) {\n        if (\n          this.verification_input == this.verification_code &&\n          this.verification_input != \"\"\n        ) {\n          this.verification_field = true;\n        }\n\n        this.time--;\n        this.btntxt = \"Resend Code after \" + this.time + \" Seconds\";\n        setTimeout(this.timer, 1000);\n      } else {\n        this.time = 0;\n        this.btntxt = \"Send Verification Code\";\n        this.disabled = false;\n      }\n    },\n    swalNotification(swalType) {\n      if (swalType == \"success\") {\n        this.$swal({\n          title: \"Successful Registration\",\n          text: \"Automatically proceed to Login page.\",\n          type: swalType\n        });\n      } else {\n        this.$swal({\n          title: \"Registration Failed\",\n          text: \"Please double check user information and submit again.\",\n          type: swalType,\n          showCancelButton: true,\n          buttonsStyling: false,\n          cancelButtonText: \"Cancel\",\n          cancelButtonClass: \"btn btn-default\"\n        });\n      }\n    }\n  }\n};\n",{"version":3,"sources":["User-Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"User-Register.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <!-- begin register -->\n  <div class=\"register register-with-news-feed\">\n    <!-- begin news-feed -->\n    <div class=\"news-feed\">\n      <div class=\"news-image\"></div>\n      <div class=\"news-caption\">\n        <h4 class=\"caption-title\">\n          <b>Hibernia-Sino</b> Travel Insurance\n        </h4>\n        <p>Travel with peace of mind. Compare the below plans and buy online with our best price guarantee. Our checkout process is 100% safe and secure and you’ll receive your policy within minutes via email.</p>\n      </div>\n    </div>\n    <!-- end news-feed -->\n    <!-- begin right-content -->\n    <div class=\"right-content\">\n      <!-- begin register-header -->\n      <h1 class=\"register-header\">\n        Registration\n        <small>Use the following guidelines for creating a secure Hibernia-Sino Travel Insurance Account.</small>\n      </h1>\n      <!-- end register-header -->\n      <!-- begin register-content -->\n      <div class=\"register-content\">\n        <form action class=\"margin-bottom-0\" v-on:submit.prevent=\"submitForm\">\n          <label class=\"control-label\">\n            User Name\n            <span class=\"text-danger\">*</span>\n          </label>\n          <div class=\"row row-space-10\">\n            <div class=\"col-md-12\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"User Name\"\n                name=\"user name\"\n                v-validate=\"{ required: true, regex:/^[_a-zA-Z0-9\\u4E00-\\u9FA5]{2,10}$/ }\"\n                v-bind:class=\"{'is-invalid': errors.has('user name')}\"\n                v-model=\"formData.username\"\n              >\n              <span style=\"color: red !important;\">{{ errors.first('user name') }}</span>\n              <br>\n              <small class=\"text-muted\">· Username should be between 2 and 10 characters long.</small>\n              <br>\n              <small\n                class=\"text-muted\"\n              >· Can contain any Chinese characters, any English letters from a to z (or A to Z).</small>\n              <br>\n              <small\n                class=\"text-muted\"\n              >· Can contain any numbers from 0 through 9 and _ (underscore) character.</small>\n            </div>\n          </div>\n          <br>\n          <label class=\"control-label\">\n            Password\n            <span class=\"text-danger\">*</span>\n          </label>\n          <div class=\"row m-b-15\">\n            <div class=\"col-md-12\">\n              <input\n                type=\"password\"\n                class=\"form-control\"\n                placeholder=\"Password\"\n                name=\"password\"\n                ref=\"password\"\n                v-validate=\"{ required: true, regex:/^[_!?,.*#a-zA-Z0-9]{6,20}$/ }\"\n                v-bind:class=\"{'is-invalid': errors.has('password')}\"\n                v-model=\"formData.password\"\n              >\n              <span style=\"color: red !important;\">{{ errors.first('password') }}</span>\n            </div>\n          </div>\n          <label class=\"control-label\">\n            Password Confirmation\n            <span class=\"text-danger\">*</span>\n          </label>\n          <div class=\"row m-b-15\">\n            <div class=\"col-md-12\">\n              <input\n                v-validate=\"'required|confirmed:password'\"\n                name=\"confirm_password\"\n                type=\"password\"\n                class=\"form-control\"\n                placeholder=\"Password, Again\"\n                data-vv-as=\"password\"\n                v-bind:class=\"{'is-invalid': errors.has('confirm_password')}\"\n                v-model=\"formData.confirm_password\"\n              >\n              <div\n                v-if=\"errors.has('confirm_password')\"\n                style=\"color: red;\"\n              >{{ errors.first('confirm_password') }}</div>\n              <br>\n              <small class=\"text-muted\">· Password should be between 6 and 20 characters long.</small>\n              <br>\n              <small\n                class=\"text-muted\"\n              >· Can contain any English letters from a to z and any numbers from 0 through 9.</small>\n              <br>\n              <small\n                class=\"text-muted\"\n              >· Can contain some special characters, including _ (underscore), ! (exclamation mark), ? (question mark), , (comma), . (period), * (asterisk), # (pound sign).</small>\n              <br>\n            </div>\n          </div>\n          <br>\n          <label class=\"control-label\">\n            Email\n            <span class=\"text-danger\">*</span>\n          </label>\n          <div class=\"row m-b-15\">\n            <div class=\"col-md-12\">\n              <input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Email\"\n                v-validate=\"{ required: true, regex:/^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,})$/ }\"\n                class=\"form-control\"\n                v-bind:class=\"{'is-invalid': errors.has('email')}\"\n                v-model=\"formData.email\"\n              >\n              <span style=\"color: red !important;\">{{ errors.first('email') }}</span>\n              <br>\n              <div class=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  placeholder=\"Verification Code\"\n                  aria-label=\"Recipient's username\"\n                  aria-describedby=\"button-addon2\"\n                  v-bind:class=\"{'is-valid': this.verification_field}\"\n                  v-model=\"verification_input\"\n                >\n                <div class=\"input-group-append\">\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-sm btn-white\"\n                    :disabled=\"disabled\"\n                    @click=\"sendCode\"\n                  >{{btntxt}}</button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <br>\n          <label class=\"control-label\">\n            Phone Number\n            <span class=\"text-danger\">*</span>\n          </label>\n          <div class=\"row m-b-15\">\n            <div class=\"col-md-12\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                placeholder=\"Phone Number\"\n                name=\"phone number\"\n                v-validate=\"{ required: true, regex:/^1[34578]\\d{9}$/ }\"\n                v-bind:class=\"{'is-invalid': errors.has('phone number')}\"\n                v-model=\"formData.phone_num\"\n              >\n              <span style=\"color: red !important;\">{{ errors.first('phone number') }}</span>\n            </div>\n          </div>\n          <br>\n          <div class=\"register-buttons\">\n            <button class=\"btn btn-primary btn-block btn-lg\">Sign Up</button>\n          </div>\n          <div class=\"m-t-20 m-b-40 p-b-40 text-inverse\">\n            Already a member? Click\n            <a href=\"/login\">here</a> to login.\n          </div>\n        </form>\n      </div>\n      <!-- end register-content -->\n    </div>\n    <!-- end right-content -->\n  </div>\n  <!-- end register -->\n</template>\n\n<script>\nimport PageOptions from \"../config/PageOptions.vue\";\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      disabled: false,\n      time: 0,\n      btntxt: \"Send Verification Code\",\n\n      verification_code: \"\",\n      verification_input: \"\",\n      verification_field: false,\n\n      formData: {\n        username: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        email: \"\",\n        phone_num: \"\",\n        verify: 1\n      }\n    };\n  },\n  created() {\n    PageOptions.pageEmpty = true;\n    document.body.className = \"bg-white\";\n  },\n  beforeRouteLeave(to, from, next) {\n    PageOptions.pageEmpty = false;\n    document.body.className = \"\";\n    next();\n  },\n  computed: {\n    isFormInvalid() {\n      return Object.keys(this.fields).some(key => this.fields[key].invalid);\n    }\n  },\n  methods: {\n    submitForm() {\n      if (!this.isFormInvalid && this.verification_field) {\n        alert(\"All fields in form are valid.\");\n        this.formData.verify = 1;\n        var obj = JSON.stringify(this.formData);\n        axios\n          .post(\"/register/\", obj)\n          .then(res => {\n            var response = JSON.parse(JSON.stringify(res.data));\n            if (response.state == \"1\") {\n              alert(\n                \"Welcome to Hibernia-Sino Travel Insurance, dear customer.\"\n              );\n              this.$router.push(\"/login\");\n            } else {\n              this.swalNotification(\"danger\");\n            }\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n      } else if (!this.isFormInvalid && !this.verification_field) {\n        alert(\"Please enter valid verification code.\");\n      } else {\n        alert(\"Please enter valid information in all required fields.\");\n      }\n    },\n    sendCode() {\n      this.formData.verify = 0;\n      this.verification_input = \"\";\n      this.verification_field = false;\n\n      if (this.fields.email.valid) {\n        var params = {\n          email: this.formData.email,\n          verify: this.formData.verify\n        };\n        var obj = JSON.stringify(params);\n\n        axios\n          .post(\"/register/\", obj)\n          .then(res => {\n            if (res.data == 0) {\n              alert(\"Sorry, sending verification code failed.\");\n            } else {\n              this.time = 60;\n              this.disabled = true;\n              this.timer();\n              this.verification_code = res.data;\n              alert(res.data);\n            }\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n      }\n    },\n    timer() {\n      if (this.time > 0) {\n        if (\n          this.verification_input == this.verification_code &&\n          this.verification_input != \"\"\n        ) {\n          this.verification_field = true;\n        }\n\n        this.time--;\n        this.btntxt = \"Resend Code after \" + this.time + \" Seconds\";\n        setTimeout(this.timer, 1000);\n      } else {\n        this.time = 0;\n        this.btntxt = \"Send Verification Code\";\n        this.disabled = false;\n      }\n    },\n    swalNotification(swalType) {\n      if (swalType == \"success\") {\n        this.$swal({\n          title: \"Successful Registration\",\n          text: \"Automatically proceed to Login page.\",\n          type: swalType\n        });\n      } else {\n        this.$swal({\n          title: \"Registration Failed\",\n          text: \"Please double check user information and submit again.\",\n          type: swalType,\n          showCancelButton: true,\n          buttonsStyling: false,\n          cancelButtonText: \"Cancel\",\n          cancelButtonClass: \"btn btn-default\"\n        });\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.news-feed {\n  background-image: url(\"../assets/img/register.jpg\");\n  width: 45% !important;\n}\n\n.right-content {\n  width: 55% !important;\n}\n\n.text-muted {\n  color: dimgray !important;\n}\n\n.is-invalid {\n  background-color: #facccc62 !important;\n}\n\n.is-valid {\n  background-color: #e1fcc4be !important;\n}\n</style>\n"]}]}