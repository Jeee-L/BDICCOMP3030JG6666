{"remainingRequest":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\src\\employee\\Page-Employee-Insurance.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\src\\employee\\Page-Employee-Insurance.vue","mtime":1556121148000},{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\SoftwareProject2\\BDICCOMP3030JG6666\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport PageOptions from \"../config/PageOptions.vue\";\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport { ClientTable } from \"vue-tables-2\";\r\nimport { all } from \"q\";\r\nimport { setTimeout } from \"timers\";\r\n\r\nVue.use(ClientTable);\r\n\r\nvar rawData = [];\r\n\r\nexport default {\r\n  components: {\r\n    ClientTable\r\n  },\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      columns: [\r\n        \"Index\",\r\n        \"Insurance ID\",\r\n        \"Username\",\r\n        \"Product ID\",\r\n        \"Project ID\",\r\n        \"Price Total\",\r\n        \"Date\",\r\n        \"Status\",\r\n        \"Remark\"\r\n      ],\r\n      options: {\r\n        pagination: { chunk: 5 },\r\n        sortIcon: {\r\n          is: \"fa-sort\",\r\n          base: \"fas\",\r\n          up: \"fa-sort-up\",\r\n          down: \"fa-sort-down\"\r\n        }\r\n      }\r\n    };\r\n  },\r\n  created() {\r\n    PageOptions.pageWithTopMenu = true;\r\n    PageOptions.pageWithoutSidebar = true;\r\n\r\n    this.updateData();\r\n    this.retryData();\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    PageOptions.pageWithTopMenu = false;\r\n    PageOptions.pageWithoutSidebar = false;\r\n    next();\r\n  },\r\n  methods: {\r\n    updateData() {\r\n      rawData = [];\r\n      axios\r\n        .get(\"/check_all_insurance/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            for (var i = 0; i < response.length; i++) {\r\n              rawData[rawData.length] = {\r\n                \"Insurance ID\": response[i].id,\r\n                Username: response[i].username,\r\n                \"Product ID\": response[i].product_id,\r\n                \"Project ID\": response[i].project_id,\r\n                \"Price Total\": response[i].amount_of_money,\r\n                Date: response[i].date,\r\n                Status: response[i].status,\r\n                Remark: response[i].remark\r\n              };\r\n            }\r\n          }\r\n          if (rawData != null) {\r\n            this.tableData = rawData.map((item, index) => {\r\n              item[\"Index\"] = index;\r\n              return item;\r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    },\r\n    show(group, type = \"\") {\r\n      const text = \"New insurance order awarting for process!\";\r\n      this.$notify({\r\n        group,\r\n        text,\r\n        type,\r\n        data: {\r\n          randomNumber: Math.random()\r\n        }\r\n      });\r\n    },\r\n    checkRemark(row) {\r\n      console.log(row);\r\n      alert(`Editing row id: ${row.Remark}`);\r\n    },\r\n    retryData() {\r\n      var timer;\r\n      axios\r\n        .get(\"/check_all_insurance/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            this.show(\"bottom-right\", \"success\");\r\n            if (response.length != rawData.length) {\r\n              this.show(\"bottom-right\", \"success\");\r\n            }\r\n            timer = setInterval(() => {\r\n              clearInterval(timer);\r\n              this.retryData();\r\n            }, 10000);\r\n          } else {\r\n            console.log(\"Periodlically update failed.\");\r\n            return;\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["Page-Employee-Insurance.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Page-Employee-Insurance.vue","sourceRoot":"src/employee","sourcesContent":["<template>\r\n  <div class=\"card card-default\">\r\n    <div class=\"card-header\">\r\n      <h3>Insurance Record Table</h3>\r\n    </div>\r\n    <div class=\"card-body\" style=\"font-size: 15px\">\r\n      <div>\r\n        Please click button \"Update Table\" once you want to check new data.\r\n        <br>Once new insurance is created, the system will notfify employees at the top-right corner.\r\n        <br>Requests for data update will be initiated every ten seconds.\r\n      </div>\r\n      <div class=\"btn-update\">\r\n        <b-btn\r\n          variant=\"outline-info\"\r\n          class=\"mb-1 mr-1 right-button\"\r\n          @click=\"updateData()\"\r\n        >Update Table</b-btn>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card card-body table-part\">\r\n      <v-client-table :data=\"tableData\" :columns=\"columns\" :options=\"options\">\r\n        <template slot=\"Remark\" slot-scope=\"props\">\r\n          <div>\r\n            <b-btn\r\n              variant=\"outline-dark\"\r\n              class=\"btn-xs\"\r\n              @click.prevent=\"checkRemark(props.row)\"\r\n            >Check</b-btn>\r\n          </div>\r\n        </template>\r\n      </v-client-table>\r\n    </div>\r\n\r\n    <!-- bottom right animation example -->\r\n    <notifications group=\"bottom-right\" position=\"top right\" :speed=\"500\" :duration=\"2000\"/>\r\n  </div>\r\n</template>\r\n<script>\r\nimport PageOptions from \"../config/PageOptions.vue\";\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport { ClientTable } from \"vue-tables-2\";\r\nimport { all } from \"q\";\r\nimport { setTimeout } from \"timers\";\r\n\r\nVue.use(ClientTable);\r\n\r\nvar rawData = [];\r\n\r\nexport default {\r\n  components: {\r\n    ClientTable\r\n  },\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      columns: [\r\n        \"Index\",\r\n        \"Insurance ID\",\r\n        \"Username\",\r\n        \"Product ID\",\r\n        \"Project ID\",\r\n        \"Price Total\",\r\n        \"Date\",\r\n        \"Status\",\r\n        \"Remark\"\r\n      ],\r\n      options: {\r\n        pagination: { chunk: 5 },\r\n        sortIcon: {\r\n          is: \"fa-sort\",\r\n          base: \"fas\",\r\n          up: \"fa-sort-up\",\r\n          down: \"fa-sort-down\"\r\n        }\r\n      }\r\n    };\r\n  },\r\n  created() {\r\n    PageOptions.pageWithTopMenu = true;\r\n    PageOptions.pageWithoutSidebar = true;\r\n\r\n    this.updateData();\r\n    this.retryData();\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    PageOptions.pageWithTopMenu = false;\r\n    PageOptions.pageWithoutSidebar = false;\r\n    next();\r\n  },\r\n  methods: {\r\n    updateData() {\r\n      rawData = [];\r\n      axios\r\n        .get(\"/check_all_insurance/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            for (var i = 0; i < response.length; i++) {\r\n              rawData[rawData.length] = {\r\n                \"Insurance ID\": response[i].id,\r\n                Username: response[i].username,\r\n                \"Product ID\": response[i].product_id,\r\n                \"Project ID\": response[i].project_id,\r\n                \"Price Total\": response[i].amount_of_money,\r\n                Date: response[i].date,\r\n                Status: response[i].status,\r\n                Remark: response[i].remark\r\n              };\r\n            }\r\n          }\r\n          if (rawData != null) {\r\n            this.tableData = rawData.map((item, index) => {\r\n              item[\"Index\"] = index;\r\n              return item;\r\n            });\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    },\r\n    show(group, type = \"\") {\r\n      const text = \"New insurance order awarting for process!\";\r\n      this.$notify({\r\n        group,\r\n        text,\r\n        type,\r\n        data: {\r\n          randomNumber: Math.random()\r\n        }\r\n      });\r\n    },\r\n    checkRemark(row) {\r\n      console.log(row);\r\n      alert(`Editing row id: ${row.Remark}`);\r\n    },\r\n    retryData() {\r\n      var timer;\r\n      axios\r\n        .get(\"/check_all_insurance/\")\r\n        .then(res => {\r\n          if (res.data != null) {\r\n            var response = JSON.parse(JSON.stringify(res.data));\r\n            this.show(\"bottom-right\", \"success\");\r\n            if (response.length != rawData.length) {\r\n              this.show(\"bottom-right\", \"success\");\r\n            }\r\n            timer = setInterval(() => {\r\n              clearInterval(timer);\r\n              this.retryData();\r\n            }, 10000);\r\n          } else {\r\n            console.log(\"Periodlically update failed.\");\r\n            return;\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.table-part {\r\n  background-color: rgba(127, 236, 255, 0.096) !important;\r\n}\r\n\r\n.btn-update {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"]}]}